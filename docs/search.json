[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BCB520_JupyterBlog",
    "section": "",
    "text": "Assignment 3: Mucking up a Visualization\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nFeb 17, 2025\n\n\nJohn Cambareri\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nFeb 15, 2025\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Assignment 3: Mucking up a Visualization",
    "section": "",
    "text": "This downloads University of Idaho research expenditure data from the National Science Foundation (NSF) and the National Institutes of Health (NIH). Then, this creates a visualization, and finally, this intentionally makes it bad.\n\nCombining NSF and NIH Data\n\nStep 1: Collecting the NSF Data\n\n\nCode\nimport requests\nfrom datetime import datetime\nimport pandas as pd\nimport re\nimport numpy as np\nimport json\n\n\n\n\nInitialize variables for the NSF data\n\n\nCode\nbase_url = \"https://www.research.gov/awardapi-service/v1/awards.json?awardeeName=%22regents+of+the+university+of+idaho%22\"\n\nprintFields = \"rpp,offset,id,agency,awardeeCity,awardeeCountryCode,awardeeDistrictCode,awardeeName,\\\n                awardeeStateCode,awardeeZipCode,cfdaNumber,coPDPI,date,startDate,expDate,estimatedTotalAmt,\\\n                fundsObligatedAmt,ueiNumber,fundProgramName,parentUeiNumber,pdPIName,perfCity,perfCountryCode,\\\n                perfDistrictCode,perfLocation,perfStateCode,perfZipCode,poName,primaryProgram,transType,title,\\\n                awardee,poPhone,poEmail,awardeeAddress,perfAddress,publicationResearch,publicationConference,\\\n                fundAgencyCode,awardAgencyCode,projectOutComesReport,abstractText,piFirstName,piMiddeInitial,\\\n                piLastName,piEmail\"\n\n# Initialize an empty DataFrame to store results\nall_awards = pd.DataFrame()\n\n# Number of results per page (as per API settings)\nresults_per_page = 25\n\n# Variable to keep track of the current page number\ncurrent_page = 1\n\n# Variable to control the loop\nkeep_going = True\n\n\n\n\nExtract data from the NSF website\n\n\nCode\nwhile keep_going:\n    # Calculate the offset for the current page\n    offset = (current_page - 1) * results_per_page + 1\n\n    # Construct the full URL with offset\n    url = f\"{base_url}&offset={offset}&printFields={printFields}\"\n\n    # Make the API call\n    response = requests.get(url)\n\n    # Check if the call was successful\n    if response.status_code == 200:\n        # Extract and parse the JSON data\n        parsed_data = response.json()\n\n        # Extract the 'award' data and add to the all_awards DataFrame\n        awards_data = pd.json_normalize(parsed_data['response']['award'])\n        all_awards = pd.concat([all_awards, awards_data], ignore_index=True)\n\n        # Debug: Print the current page number and number of awards fetched\n        print(f\"Page: {current_page} - Awards fetched: {len(awards_data['id'])}\")\n\n        # Check if the current page has less than results_per_page awards, then it's the last page\n        if len(awards_data['id']) &lt; results_per_page:\n            keep_going = False\n        else:\n            current_page += 1\n    else:\n        print(f\"Failed to fetch data: Status code {response.status_code}\")\n        keep_going = False\n\n\nPage: 1 - Awards fetched: 25\nPage: 2 - Awards fetched: 25\nPage: 3 - Awards fetched: 25\nPage: 4 - Awards fetched: 25\nPage: 5 - Awards fetched: 25\nPage: 6 - Awards fetched: 25\nPage: 7 - Awards fetched: 25\nPage: 8 - Awards fetched: 25\nPage: 9 - Awards fetched: 25\nPage: 10 - Awards fetched: 25\nPage: 11 - Awards fetched: 25\nPage: 12 - Awards fetched: 25\nPage: 13 - Awards fetched: 25\nPage: 14 - Awards fetched: 25\nPage: 15 - Awards fetched: 25\nPage: 16 - Awards fetched: 25\nPage: 17 - Awards fetched: 25\nPage: 18 - Awards fetched: 25\nPage: 19 - Awards fetched: 25\nPage: 20 - Awards fetched: 25\nPage: 21 - Awards fetched: 25\nPage: 22 - Awards fetched: 25\nPage: 23 - Awards fetched: 25\nPage: 24 - Awards fetched: 25\nPage: 25 - Awards fetched: 3\n\n\n\n\nSave data into csv file\nOptional: Uncomment the ‘to_csv’ command by removing the ‘#’ to save the result of the extraction to a CSV file. If you want to load the data from the CSV file instead of redoing the NSF extraction, uncomment the read_csv command and run it as well.\n\n\nCode\n#all_awards.to_csv(\"UINSF.csv\", index=False)\n#all_awards = pd.read_csv(\"UINSF.csv\")\n\n\nIf we print out the resulting dataframe now, there is a lot of data - too much, in fact.\n\n\nCode\nall_awards\n\n\n\n\n\n\n\n\n\nabstractText\nagency\nawardAgencyCode\nawardeeAddress\nawardeeCity\nawardeeCountryCode\nawardeeDistrictCode\nawardeeName\nawardeeStateCode\nawardeeZipCode\n...\ndate\nstartDate\nexpDate\ntitle\ntransType\nawardee\ncoPDPI\npiMiddeInitial\npublicationResearch\nprojectOutComesReport\n\n\n\n\n0\nTo improve the information processing of a sud...\nNSF\n4900\n875 PERIMETER DR\nMOSCOW\nUS\nID01\nRegents of the University of Idaho\nID\n838449803\n...\n11/22/2024\n01/01/2025\n12/31/2026\nEPSCoR Research Fellows: NSF: Modeling Human P...\nStandard Grant\nREGENTS OF THE UNIVERSITY OF IDAHO\nNaN\nNaN\nNaN\nNaN\n\n\n1\nCommercial semiconductor chips and their packa...\nNSF\n4900\n875 PERIMETER DR\nMOSCOW\nUS\nID01\nRegents of the University of Idaho\nID\n838449803\n...\n09/10/2024\n01/01/2025\n12/31/2026\nEPSCoR Research Fellows: NSF: Heterogeneous In...\nStandard Grant\nREGENTS OF THE UNIVERSITY OF IDAHO\nNaN\nNaN\nNaN\nNaN\n\n\n2\nThe goal of this fellowship project is to enha...\nNSF\n4900\n875 PERIMETER DR\nMOSCOW\nUS\nID01\nRegents of the University of Idaho\nID\n838449803\n...\n12/02/2024\n01/01/2025\n12/31/2026\nEPSCoR Research Fellows: NSF: Incorporating Kn...\nStandard Grant\nREGENTS OF THE UNIVERSITY OF IDAHO\nNaN\nNaN\nNaN\nNaN\n\n\n3\nChanging climates are a major challenge for hu...\nNSF\n4900\n875 PERIMETER DR\nMOSCOW\nUS\nID01\nRegents of the University of Idaho\nID\n838449803\n...\n07/19/2024\n12/01/2024\n11/30/2027\nCollaborative Research: ORCC: Integrating evol...\nContinuing Grant\nREGENTS OF THE UNIVERSITY OF IDAHO\n[James J Nagler, Alexandra K Fraik]\nA\nNaN\nNaN\n\n\n4\nThis award supports research in relativity and...\nNSF\n4900\n875 PERIMETER DR\nMOSCOW\nUS\nID01\nRegents of the University of Idaho\nID\n838449803\n...\n11/12/2024\n11/15/2024\n09/30/2025\nBoosting Algorithmic Efficiency: Numerical Rel...\nStandard Grant\nREGENTS OF THE UNIVERSITY OF IDAHO\nNaN\nB\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n598\nNaN\nNSF\n4900\n875 PERIMETER DR\nMOSCOW\nUS\nID01\nRegents of the University of Idaho\nID\n838449803\n...\n03/15/1974\n03/15/1974\n08/31/1975\nAn Implementation Project in Elementary School...\nStandard Grant\nREGENTS OF THE UNIVERSITY OF IDAHO\nNaN\nG\nNaN\nNaN\n\n\n599\nNaN\nNSF\n4900\n875 PERIMETER DR\nMOSCOW\nUS\nID01\nRegents of the University of Idaho\nID\n838449803\n...\n07/24/1973\n09/01/1973\n08/31/1976\nSubmicron Particle Collection By Beds of Small...\nStandard Grant\nREGENTS OF THE UNIVERSITY OF IDAHO\nNaN\nL\nNaN\nNaN\n\n\n600\nNaN\nNSF\n4900\n875 PERIMETER DR\nMOSCOW\nUS\nID01\nRegents of the University of Idaho\nID\n838449803\n...\n02/09/1973\n03/15/1973\n08/31/1976\nEcology of the Leopard\nStandard Grant\nREGENTS OF THE UNIVERSITY OF IDAHO\nNaN\nG\nNaN\nNaN\n\n\n601\nNaN\nNSF\n4900\n875 PERIMETER DR\nMOSCOW\nUS\nID01\nRegents of the University of Idaho\nID\n838449803\n...\n05/18/1972\n06/01/1972\n05/31/1975\nEcology of the Greater Sandhill Crane\nContinuing Grant\nREGENTS OF THE UNIVERSITY OF IDAHO\n[George Lauff, Jochen Kummerow, DATA NOT A...\nNaN\nNaN\nNaN\n\n\n602\nNaN\nNSF\n4900\n875 PERIMETER DR\nMOSCOW\nUS\nID01\nRegents of the University of Idaho\nID\n838449803\n...\n06/25/1968\n06/25/1968\n06/30/1968\n1968 Institutional Grants For Science\nStandard Grant\nREGENTS OF THE UNIVERSITY OF IDAHO\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n603 rows × 43 columns\n\n\n\nWe will reduce the amount of columns, by only grabbing the relevant ones.\n\n\nCode\nreducedCols = all_awards[[\"cfdaNumber\", \"estimatedTotalAmt\", \"fundsObligatedAmt\", \"fundProgramName\",\\\n                          \"id\", \"pdPIName\", \"piFirstName\", \"piMiddeInitial\", \"piLastName\", \"poName\",\\\n                          \"date\", \"startDate\", \"expDate\", \"title\", \"coPDPI\"]].copy()\n\n\nNow we clean up the columns a bit.\n\n\nCode\n#change formatting of monetary data from int to float\nreducedCols[\"estimatedTotalAmt\"] = reducedCols[\"estimatedTotalAmt\"].astype(float)\n\n#turn dates into pandas dates\nreducedCols[\"date\"] = pd.to_datetime(reducedCols[\"date\"])\nreducedCols[\"startDate\"] = pd.to_datetime(reducedCols[\"startDate\"])\nreducedCols[\"expDate\"] = pd.to_datetime(reducedCols[\"expDate\"])\n\n#only grab recent articles\ncurrentData = reducedCols[reducedCols[\"expDate\"] &gt; pd.to_datetime(\"2019-01-01\")].copy()\n\n#remove Nulls/NAs from the Co-PI column\ncurrentData['coPDPI'] = [ [] if x is np.nan else x for x in currentData['coPDPI']]\n\n#rename dataframe\nNSFPIData = currentData\n\n\n\n\nCo-PI Information\nIn this dataframe, some of the PIs have 1 or more Co-PIs associated with them.\nHere we shall create a new dataframe from the PI dataframe; only those with at least one Co-PI are kept.\n\n\nCode\nNSFcoPIData = currentData[currentData[\"coPDPI\"].str.len() &gt; 0]\n\n\nNext, we will make it so that each element in the list gets seperated into a different row. This is done using the explode() function.\n\n\nCode\nNSFcoPIData = NSFcoPIData.explode(\"coPDPI\")\n\n\n\n\n\nStep 2: NIH Data\nAttaining the NIH data is a little different than attaining the NSF data, so a slightly different method will need to be used here. The code block below will use an API request to request the information from the NSF website. The result will then be saved into a JSON file, from which we will extract the data from into a dataframe.\n\n\nCode\n# Define the current year and calculate the starting fiscal year (6 years ago; 2019)\ncurrent_year = datetime.now().year\nstart_fiscal_year = current_year - 6\n\n# Define the API URL and endpoint\nurl = \"https://api.reporter.nih.gov/v2/projects/search\"\n\n# Define the API request payload\npayload = {\n    \"criteria\": {\n        \"org_names\": [\"UNIVERSITY OF IDAHO\"],  # Filter for the University of Idaho\n        \"fiscal_years\": list(range(start_fiscal_year, current_year + 1)),  # Last 5 years\n        \"newly_added_projects_only\": False  # Include all projects, not just newly added ones\n    },\n    \"include_fields\": [\n        \"ApplId\", \"SubprojectId\", \"FiscalYear\", \"ProjectNum\", \"ProjectSerialNum\",\n        \"Organization\", \"OrganizationType\", \"AwardType\", \"ActivityCode\", \"AwardAmount\",\n        \"ProjectNumSplit\", \"PrincipalInvestigators\", \"ProgramOfficers\", \"AgencyIcAdmin\",\n        \"AgencyIcFundings\", \"CongDist\", \"ProjectStartDate\", \"ProjectEndDate\", \"FullFoa\",\n        \"FullStudySection\", \"AwardNoticeDate\", \"CoreProjectNum\", \"PrefTerms\", \"ProjectTitle\",\n        \"PhrText\", \"SpendingCategoriesDesc\", \"ArraFunded\", \"BudgetStart\", \"BudgetEnd\",\n        \"CfdaCode\", \"FundingMechanism\", \"DirectCostAmt\", \"IndirectCostAmt\"\n    ],\n    \"offset\": 0,  # Start from the first record\n    \"limit\": 500,  # Number of records to fetch per request, can be adjusted\n    \"sort_field\": \"project_start_date\",\n    \"sort_order\": \"desc\"\n}\n\n# Make the API request\nresponse = requests.post(url, headers={\"Content-Type\": \"application/json\"}, data=json.dumps(payload))\n \n# Check for a successful response\nif response.status_code == 200:\n    data = response.json()  # Parse the JSON response\n    with open('university_of_idaho_awards_last_5_years.json', 'w') as f:\n        json.dump(data, f, indent=4)\n    print(\"Data successfully downloaded and saved to 'university_of_idaho_awards_2019_2024.json'\")\nelse:\n    print(f\"Failed to retrieve data: {response.status_code} - {response.text}\")\n\n\nData successfully downloaded and saved to 'university_of_idaho_awards_2019_2024.json'\n\n\n\n\nCode\n# Load the JSON data from the file, replace the name with whatever file you want to load from\nwith open('university_of_idaho_awards_last_5_years.json', 'r') as f:\n    data = json.load(f)\n    \n# Extract relevant fields and create a list of dictionaries\nawards_data = []\nfor project in data.get('results', []):\n    org_name = project.get('organization', {}).get('org_name', '')\n    project_num = project.get('project_num', '')\n    project_title = project.get('project_title', '')\n   \n    # Principal Investigators (concatenating names if more than one PI)\n    principal_investigators = \", \".join(\n        [pi.get('full_name', '') for pi in project.get('principal_investigators', [])]\n    )\n    \n    # Extract First Names and Last Names for ease of use later\n    principal_investigators_first_name = \", \".join(\n        [pi.get('first_name', '') for pi in project.get('principal_investigators', [])]\n    )\n    \n    principal_investigators_last_name = \", \".join(\n        [pi.get('last_name', '') for pi in project.get('principal_investigators', [])]\n    )\n   \n    direct_cost_amt = project.get('direct_cost_amt', 0)\n   \n    awards_data.append({\n        \"Organization\": org_name,\n        \"ProjectNum\": project_num,\n        \"ProjectTitle\": project_title,\n        \"PrincipalInvestigators\": principal_investigators,\n        \"PrincipalInvestigatorsFirstName\": principal_investigators_first_name,\n        \"PrincipalInvestigatorsLastName\": principal_investigators_last_name,\n        \"DirectCostAmt\": direct_cost_amt\n    })\n    \ndf = pd.DataFrame(awards_data)\n\n\n\nSplit columns\nUnlike in the NSF data, NIH data can list multiple PIs. Therefore, each of the relevant columns need to be split in case there is more than one present.\n\n\nCode\ndf[\"PrincipalInvestigators\"] = df[\"PrincipalInvestigators\"].str.split(',')\ndf[\"PrincipalInvestigatorsFirstName\"] = df[\"PrincipalInvestigatorsFirstName\"].str.split(',')\ndf[\"PrincipalInvestigatorsLastName\"] = df[\"PrincipalInvestigatorsLastName\"].str.split(',')\n\n\nThe explode() function sees use again here.\n\n\nCode\nNIHData = df.explode([\"PrincipalInvestigators\", \"PrincipalInvestigatorsFirstName\", \\\n                      \"PrincipalInvestigatorsLastName\"])\n\n\nTypecast relevant information from int to float\n\n\nCode\nNIHData[\"DirectCostAmt\"] = NIHData[\"DirectCostAmt\"].astype(float)\n\n\n\n\n\nStep 3: Name Cleanup\nSince NIH and NSF display their names differently, simply combining the two databases together can result in some of the data for faculty being split up across the two in the event that they submitted a research grant for both institutions.\nFirst, we shall define a couple of helper functions that will use regular expressions to help sort out inconsistencies.\n\n\nCode\n#Sometimes a middle name is shown in the name tab in the Co-PI table, which is unwanted here.\ndef removeMiddleName(name):\n    parts = name.split()\n    if len(parts) &lt;= 2:\n        return name\n    return parts[0] + \" \" + parts[-1]\n\nNSFcoPIData[\"coPIFullName\"] = NSFcoPIData[\"coPDPI\"].apply(removeMiddleName)\n\n#remove whitespace from start of the name\ndef removeInitialSpace(name):\n    regex = r\"^\\s\"\n    while re.match(regex, name):\n        name = name[1:]\n        \n    return name\n        \nNIHData[\"PrincipalInvestigatorsFirstName\"] = NIHData[\"PrincipalInvestigatorsFirstName\"].apply(removeInitialSpace)\nNIHData[\"PrincipalInvestigatorsLastName\"] = NIHData[\"PrincipalInvestigatorsLastName\"].apply(removeInitialSpace)\n\n\n\nAdd Full Name column\nFor the NSF PI data and the NIH data, middle names are applied inconsistently. Thus, instead of using the removeMiddleName() function as done above, we simply take the first and last name columns and add them together.\nCapitalization is also an inconsistency between the two institutions. To fix this, all names will be capitalized.\n\n\nCode\nNSFPIData[\"piFullName\"] = NSFPIData[\"piFirstName\"] + \" \" + NSFPIData[\"piLastName\"]\nNIHData[\"PIName\"] = NIHData[\"PrincipalInvestigatorsFirstName\"] + \" \" + NIHData[\"PrincipalInvestigatorsLastName\"]\n\nNSFPIData[\"piFullName\"] = NSFPIData[\"piFullName\"].str.upper()\nNSFcoPIData[\"coPIFullName\"] = NSFcoPIData[\"coPIFullName\"].str.upper()\nNIHData[\"PIName\"] = NIHData[\"PIName\"].str.upper()\n\n\nA few exceptions still remain, so these have to be fixed manually.\n\n\nCode\nNSFcoPIData.loc[NSFcoPIData[\"coPIFullName\"] == \"TERESA COHN\", \"coPIFullName\"] = \"TERESA CAVAZOS COHN\"\nNSFcoPIData.loc[NSFcoPIData[\"coPIFullName\"] == \"JAGDISH PATEL\", \"coPIFullName\"] = \"JAGDISH SURESH PATEL\"\n\n\n\n\n\nStep 4: Making the Plot\nNow that all of the data is ready to go, it’s time to create a graph that will visualize the data.\nThe NIH and NSF PI data combine together nicely, but the Co-PI data does not work well when added cumulatively with the PI data. Therefore, one solution is to make two graphs - a bar graph with the PI data, and a scatter/circle plot for the NSF data.\nWe will use plotly’s graph function as follows. First we import plotly’s graph_objects library. Since we want to make two plots, we can also use plotly’s subplot library as well.\n\n\nCode\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n\nNow we define the overall structure of the subplot. Each parameter will be as follows:\nWe want the plots to be side-by-side, so we want 1 row and 2 columns.\nWe want the data points on the y axis (in this case, it’s the PI/Co-PI’s names) to be the same across the subplots, and we can implement this with the shared_yaxes parameter.\nHorizontal spacing just ensures that the space between the two halves of the overall plot are minimized.\nNote that in this code block below, the code is commented. This is on purpose, to avoid the plot information from being displayed too early.\n\n\nCode\n'''\nNIH_NSF = make_subplots(\n    rows = 1,\n    cols = 2,\n    shared_yaxes = True,\n    horizontal_spacing = 0.02\n)\n'''\n\n\n'\\nNIH_NSF = make_subplots(\\n    rows = 1,\\n    cols = 2,\\n    shared_yaxes = True,\\n    horizontal_spacing = 0.02\\n)\\n'\n\n\nFirst, We will add the NSF PI data to the graph. This will be a bar function.\nWe use x for the total money amount, and y for the names of the PIs.\nThe ‘text’ parameter will cause the bar to display a value on the bar itself; in this case we want the same as the x axis (the total money amount). “Inside” means that it will be positioned in the bar itself, not directly above or to the side of the bar.\nSetting orientation to ‘h’ lets plotly know that its a sideways plot; the bar graphs will be coming from left-to-right instead of bottom-to-top.\nFinally, we set a ‘customdata’ field. This is used with the hovertemplate directly below, in order to display data when the graph is moused over. &lt;br&gt; tags will cause a line break, and the $.2s field causes the money to be rounded to the nearest 2 significant digits.\nFinally, the row and column position of the bar graph in the overall graph is displayed.\n\n\nCode\n'''\nNIH_NSF.add_trace(go.Bar(\n    x = NSFPIData[\"estimatedTotalAmt\"],\n    y = NSFPIData[\"piFullName\"],\n    text = NSFPIData[\"estimatedTotalAmt\"],\n    textposition = \"inside\",\n    name = \"Estimated Total Amount (As PI (NSF))\",\n    orientation = \"h\",\n    customdata = NSFPIData[[\"title\", \"coPDPI\"]],\n    hovertemplate = \"Name: %{y} &lt;br&gt; Amount: %{x:$.2s} &lt;br&gt; Title: %{customdata[0]} &lt;br&gt; CoPIs: %{customdata[1]}\"\n), row = 1, col = 1)\n'''\n\n\n'\\nNIH_NSF.add_trace(go.Bar(\\n    x = NSFPIData[\"estimatedTotalAmt\"],\\n    y = NSFPIData[\"piFullName\"],\\n    text = NSFPIData[\"estimatedTotalAmt\"],\\n    textposition = \"inside\",\\n    name = \"Estimated Total Amount (As PI (NSF))\",\\n    orientation = \"h\",\\n    customdata = NSFPIData[[\"title\", \"coPDPI\"]],\\n    hovertemplate = \"Name: %{y} &lt;br&gt; Amount: %{x:$.2s} &lt;br&gt; Title: %{customdata[0]} &lt;br&gt; CoPIs: %{customdata[1]}\"\\n), row = 1, col = 1)\\n'\n\n\nNext, we do the same thing, but with the NIH data instead. A couple of things to note here:\nFirst, This will be in the same row and column as the NSF data.\nSecond, the NIH data does not provide co-PI information, so the customdata parameter here is not as large.\n\n\nCode\n'''\nNIH_NSF.add_trace(go.Bar(\n    x = NIHData[\"DirectCostAmt\"],\n    y = NIHData[\"PIName\"],\n    text = NIHData[\"DirectCostAmt\"],\n    textposition = \"inside\",\n    name = \"Direct Cost Amount (As PI (NIH))\",\n    orientation = \"h\",\n    customdata = NIHData[\"ProjectTitle\"],\n    hovertemplate = \"Name: %{y} &lt;br&gt; Amount: %{x:$.2s} &lt;br&gt; Title: %{customdata}\"\n), row = 1, col = 1)\n'''\n\n\n'\\nNIH_NSF.add_trace(go.Bar(\\n    x = NIHData[\"DirectCostAmt\"],\\n    y = NIHData[\"PIName\"],\\n    text = NIHData[\"DirectCostAmt\"],\\n    textposition = \"inside\",\\n    name = \"Direct Cost Amount (As PI (NIH))\",\\n    orientation = \"h\",\\n    customdata = NIHData[\"ProjectTitle\"],\\n    hovertemplate = \"Name: %{y} &lt;br&gt; Amount: %{x:$.2s} &lt;br&gt; Title: %{customdata}\"\\n), row = 1, col = 1)\\n'\n\n\nHere we update the graph to show the horizontal axis on the bar chart itself, to make readability better and to make it easier to associate items on the bar chart side of the graph with the items on the scatter plot side of the graph.\n\n\nCode\n'''\nNIH_NSF.update_yaxes(showgrid = True)\nNIH_NSF.update_traces(texttemplate = '%{text:.2s}')\n'''\n\n\n\"\\nNIH_NSF.update_yaxes(showgrid = True)\\nNIH_NSF.update_traces(texttemplate = '%{text:.2s}')\\n\"\n\n\nLastly, we implement the Scatter plot portion of the graph. This has a few different parameters than the bar graph; in this case, we see the mode of “markers”.\nIn this case, we want the size of the scatter plot/bubble to be directly proportional to how much money the co-PI is responsible for, but we also want to set a cap on how large the bubbles can be, so there is a max() function in the sizeref() parameter as part of the marker parameter.\nFinally, to ensure it’s not on the same part of the graph as the bar charts, this is placed in column 2.\n\n\nCode\n'''\nNIH_NSF.add_trace(go.Scatter(\n    x = NSFcoPIData[\"estimatedTotalAmt\"],\n    y = NSFcoPIData[\"coPIFullName\"],\n    name = \"Estimated Total Amount (As CoPI (NSF))\",\n    mode = 'markers',\n    marker = dict(\n        size = NSFcoPIData[\"estimatedTotalAmt\"],\n        sizemode = 'area',\n        sizeref = 2.*max(NSFcoPIData[\"estimatedTotalAmt\"])/(60**2),\n        sizemin = 4\n    ),\n    customdata = NSFcoPIData[[\"title\", \"pdPIName\"]],\n    hovertemplate = \"Name: %{y} &lt;br&gt; Amount: %{x:$.2s} &lt;br&gt; Title: %{customdata[0]} &lt;br&gt; PI: %{customdata[1]}\"\n), row = 1, col = 2)\n'''\n\n\n'\\nNIH_NSF.add_trace(go.Scatter(\\n    x = NSFcoPIData[\"estimatedTotalAmt\"],\\n    y = NSFcoPIData[\"coPIFullName\"],\\n    name = \"Estimated Total Amount (As CoPI (NSF))\",\\n    mode = \\'markers\\',\\n    marker = dict(\\n        size = NSFcoPIData[\"estimatedTotalAmt\"],\\n        sizemode = \\'area\\',\\n        sizeref = 2.*max(NSFcoPIData[\"estimatedTotalAmt\"])/(60**2),\\n        sizemin = 4\\n    ),\\n    customdata = NSFcoPIData[[\"title\", \"pdPIName\"]],\\n    hovertemplate = \"Name: %{y} &lt;br&gt; Amount: %{x:$.2s} &lt;br&gt; Title: %{customdata[0]} &lt;br&gt; PI: %{customdata[1]}\"\\n), row = 1, col = 2)\\n'\n\n\nNow we do one final update to the plot’s layout.\nThe height function measures how large the graph will show. This size might not fit on everyone’s page; adjust this if needed.\nSetting the barmode to ‘stack’ causes the two bar graphs (the NIH and NSF PI data) to stack on top of each other instead of being fitted side-to-side.\nWith the y axis being in ‘total descending’, this means that the data will be generally ordered from highest contribution to lowest. However, there is a bug with plotly that causes not all the data to be in the right order when grouped in a subplot.\n\n\nCode\n'''\nNIH_NSF.update_layout(\n    height = 1250,\n    barmode = \"stack\",\n    yaxis = {'categoryorder' : 'total descending'},\n    title_text = \"NIH and NSF Data\"\n)\n'''\n\n\n'\\nNIH_NSF.update_layout(\\n    height = 1250,\\n    barmode = \"stack\",\\n    yaxis = {\\'categoryorder\\' : \\'total descending\\'},\\n    title_text = \"NIH and NSF Data\"\\n)\\n'\n\n\nThis command will create the plot.\n\n\nCode\n'''\nNIH_NSF.show()\n'''\n\n\n'\\nNIH_NSF.show()\\n'\n\n\nCombining all the code snippets will create the plot. In this plot, you can do the following:\nMousing over any datapoint (bar graph/scatter plot) will show you data regarding that particular grant, including PI, money allocated, title, associated co-PI or PI if they exist, etc.\nIf the data is too small to read properly, you can click and hold on the graph itself to draw an area on the graph; releasing the mouse will zoom in on the area that you selected. Double-click the graph to return it to regular size.\n\n\nCode\nimport plotly.io as pio\npio.renderers.default = \"iframe\"\n\nNIH_NSF = make_subplots(\n    rows = 1,\n    cols = 2,\n    shared_yaxes = True,\n    horizontal_spacing = 0.02\n)\n\nNIH_NSF.add_trace(go.Bar(\n    x = NSFPIData[\"estimatedTotalAmt\"],\n    y = NSFPIData[\"piFullName\"],\n    text = NSFPIData[\"estimatedTotalAmt\"],\n    textposition = \"inside\",\n    name = \"Estimated Total Amount (As PI (NSF))\",\n    orientation = \"h\",\n    customdata = NSFPIData[[\"title\", \"coPDPI\"]],\n    hovertemplate = \"Name: %{y} &lt;br&gt; Amount: %{x:$.2s} &lt;br&gt; Title: %{customdata[0]} &lt;br&gt; CoPIs: %{customdata[1]}\"\n), row = 1, col = 1)\n\nNIH_NSF.add_trace(go.Bar(\n    x = NIHData[\"DirectCostAmt\"],\n    y = NIHData[\"PIName\"],\n    text = NIHData[\"DirectCostAmt\"],\n    textposition = \"inside\",\n    name = \"Direct Cost Amount (As PI (NIH))\",\n    orientation = \"h\",\n    customdata = NIHData[\"ProjectTitle\"],\n    hovertemplate = \"Name: %{y} &lt;br&gt; Amount: %{x:$.2s} &lt;br&gt; Title: %{customdata}\"\n), row = 1, col = 1)\n\nNIH_NSF.update_yaxes(showgrid = True)\nNIH_NSF.update_traces(texttemplate = '%{text:.2s}')\n\nNIH_NSF.add_trace(go.Scatter(\n    x = NSFcoPIData[\"estimatedTotalAmt\"],\n    y = NSFcoPIData[\"coPIFullName\"],\n    name = \"Estimated Total Amount (As CoPI (NSF))\",\n    mode = 'markers',\n    marker = dict(\n        size = NSFcoPIData[\"estimatedTotalAmt\"],\n        sizemode = 'area',\n        sizeref = 2.*max(NSFcoPIData[\"estimatedTotalAmt\"])/(60**2),\n        sizemin = 4\n    ),\n    customdata = NSFcoPIData[[\"title\", \"pdPIName\"]],\n    hovertemplate = \"Name: %{y} &lt;br&gt; Amount: %{x:$.2s} &lt;br&gt; Title: %{customdata[0]} &lt;br&gt; PI: %{customdata[1]}\"\n), row = 1, col = 2)\n\nNIH_NSF.update_layout(\n    height = 1250,\n    barmode = \"stack\",\n    yaxis = {'categoryorder' : 'total descending'},\n    title_text = \"NIH and NSF Data\"\n)\n\nNIH_NSF.show()\n\n\n\n\n\n\n\nMucking up the visualization\nNow that we have a graph, it’s now time to intentionally mess it up. This can be done by obscuring the differences between the NIH and NSF data. We can do this by intentionally making the marker_color of both the NIH and NSF data blue. To make it so that there is a difference, the opacity of the NIH data will be set to 0.75. Therefore, there will be a difference between the two, but it won’t be as obvious.\nZoom into the graph by dragging an area over the left side of the graph to see this in action.\n\n\nCode\nNIH_NSF_bad = make_subplots(\n    rows = 1,\n    cols = 2,\n    shared_yaxes = True,\n    horizontal_spacing = 0.02\n)\n\nNIH_NSF_bad.add_trace(go.Bar(\n    x = NSFPIData[\"estimatedTotalAmt\"],\n    y = NSFPIData[\"piFullName\"],\n    text = NSFPIData[\"estimatedTotalAmt\"],\n    textposition = \"inside\",\n    name = \"Estimated Total Amount (As PI (NSF))\",\n    orientation = \"h\",\n    customdata = NSFPIData[[\"title\", \"coPDPI\"]],\n    marker_color = \"blue\",\n    hovertemplate = \"Name: %{y} &lt;br&gt; Amount: %{x:$.2s} &lt;br&gt; Title: %{customdata[0]} &lt;br&gt; CoPIs: %{customdata[1]}\"\n), row = 1, col = 1)\n\nNIH_NSF_bad.add_trace(go.Bar(\n    x = NIHData[\"DirectCostAmt\"],\n    y = NIHData[\"PIName\"],\n    text = NIHData[\"DirectCostAmt\"],\n    textposition = \"inside\",\n    name = \"Direct Cost Amount (As PI (NIH))\",\n    orientation = \"h\",\n    customdata = NIHData[\"ProjectTitle\"],\n    marker_color = \"blue\",\n    opacity = 0.75,\n    hovertemplate = \"Name: %{y} &lt;br&gt; Amount: %{x:$.2s} &lt;br&gt; Title: %{customdata}\"\n), row = 1, col = 1)\n\nNIH_NSF_bad.update_yaxes(showgrid = True)\nNIH_NSF_bad.update_traces(texttemplate = '%{text:.2s}')\n\nNIH_NSF_bad.add_trace(go.Scatter(\n    x = NSFcoPIData[\"estimatedTotalAmt\"],\n    y = NSFcoPIData[\"coPIFullName\"],\n    name = \"Estimated Total Amount (As CoPI (NSF))\",\n    mode = 'markers',\n    marker = dict(\n        size = NSFcoPIData[\"estimatedTotalAmt\"],\n        sizemode = 'area',\n        sizeref = 2.*max(NSFcoPIData[\"estimatedTotalAmt\"])/(60**2),\n        sizemin = 4\n    ),\n    customdata = NSFcoPIData[[\"title\", \"pdPIName\"]],\n    hovertemplate = \"Name: %{y} &lt;br&gt; Amount: %{x:$.2s} &lt;br&gt; Title: %{customdata[0]} &lt;br&gt; PI: %{customdata[1]}\"\n), row = 1, col = 2)\n\nNIH_NSF_bad.update_layout(\n    height = 1250,\n    barmode = \"stack\",\n    yaxis = {'categoryorder' : 'total descending'},\n    title_text = \"NIH and NSF Data (bad, opacity)\"\n)\n\nNIH_NSF_bad.show()\n\n\n\n\n\nNow, we do a second example. In this case, instead of reducing the opacity, we instead make similar patterns in the bars themselves. In this example, we give the NSF data a forward slash ‘/’ pattern, and the NIH data a backward slash ‘\\’ pattern. Like before, this intentionally obfuscates the distinction between the two different institutions that provide the research funding.\n\n\nCode\nNIH_NSF_bad2 = make_subplots(\n    rows = 1,\n    cols = 2,\n    shared_yaxes = True,\n    horizontal_spacing = 0.02\n)\n\nNIH_NSF_bad2.add_trace(go.Bar(\n    x = NSFPIData[\"estimatedTotalAmt\"],\n    y = NSFPIData[\"piFullName\"],\n    text = NSFPIData[\"estimatedTotalAmt\"],\n    textposition = \"inside\",\n    name = \"Estimated Total Amount (As PI (NSF))\",\n    orientation = \"h\",\n    customdata = NSFPIData[[\"title\", \"coPDPI\"]],\n    marker_color = \"blue\",\n    marker_pattern_shape = \"/\",\n    hovertemplate = \"Name: %{y} &lt;br&gt; Amount: %{x:$.2s} &lt;br&gt; Title: %{customdata[0]} &lt;br&gt; CoPIs: %{customdata[1]}\"\n), row = 1, col = 1)\n\nNIH_NSF_bad2.add_trace(go.Bar(\n    x = NIHData[\"DirectCostAmt\"],\n    y = NIHData[\"PIName\"],\n    text = NIHData[\"DirectCostAmt\"],\n    textposition = \"inside\",\n    name = \"Direct Cost Amount (As PI (NIH))\",\n    orientation = \"h\",\n    customdata = NIHData[\"ProjectTitle\"],\n    marker_color = \"blue\",\n    marker_pattern_shape = \"\\\\\",\n    hovertemplate = \"Name: %{y} &lt;br&gt; Amount: %{x:$.2s} &lt;br&gt; Title: %{customdata}\"\n), row = 1, col = 1)\n\nNIH_NSF_bad2.update_yaxes(showgrid = True)\nNIH_NSF_bad2.update_traces(texttemplate = '%{text:.2s}')\n\nNIH_NSF_bad2.add_trace(go.Scatter(\n    x = NSFcoPIData[\"estimatedTotalAmt\"],\n    y = NSFcoPIData[\"coPIFullName\"],\n    name = \"Estimated Total Amount (As CoPI (NSF))\",\n    mode = 'markers',\n    marker = dict(\n        size = NSFcoPIData[\"estimatedTotalAmt\"],\n        sizemode = 'area',\n        sizeref = 2.*max(NSFcoPIData[\"estimatedTotalAmt\"])/(60**2),\n        sizemin = 4\n    ),\n    customdata = NSFcoPIData[[\"title\", \"pdPIName\"]],\n    hovertemplate = \"Name: %{y} &lt;br&gt; Amount: %{x:$.2s} &lt;br&gt; Title: %{customdata[0]} &lt;br&gt; PI: %{customdata[1]}\"\n), row = 1, col = 2)\n\nNIH_NSF_bad2.update_layout(\n    height = 1250,\n    barmode = \"stack\",\n    yaxis = {'categoryorder' : 'total descending'},\n    title_text = \"NIH and NSF Data (bad, bar patterns)\"\n)\n\nNIH_NSF_bad2.show()"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]